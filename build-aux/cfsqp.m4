#                                                                -*-Autoconf-*-
# Copyright (C) 2009 by Thomas Moulard, AIST, CNRS, INRIA.
# This file is part of the roboptim.
#
# roboptim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Additional permission under section 7 of the GNU General Public
# License, version 3 ("GPLv3"):
#
# If you convey this file as part of a work that contains a
# configuration script generated by Autoconf, you may do so under
# terms of your choice.
#
# roboptim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roboptim.  If not, see <http://www.gnu.org/licenses/>.

# serial 1

m4_pattern_forbid([^CFSQP_])

# CFSQP_LIB([action-if-found], [action-if-not-found])
# --------------------------------------------------------------
# Try to detect the library.
AC_DEFUN([CFSQP_LIB],
#FIXME: replace by cfsqp.
[AC_SEARCH_LIBS([main], [cfsqp], $1, $2)
]) # LIB_CFSQP_LIB

# CFSQP_HEADERS([action-if-found], [action-if-not-found])
# ------------------------------------------------------------------
# Try to detect the library headers.
AC_DEFUN([CFSQP_HEADERS],
[AC_CHECK_HEADERS([cfsqpusr.h], $1, $2)
]) # LIB_CFSQP_HEADERS


# CFSQP_ARG_WITH
# ------------------------------
# Add an optional dependency toward Cfsqp.
AC_DEFUN([CFSQP_ARG_WITH],
[
  AC_ARG_WITH([cfsqp],
  [AS_HELP_STRING([--with-cfsqp],
    [enable cfsqp support])],
  [],
  [with_cfsqp=check])

  AC_SUBST([DISTCHECK_CONFIGURE_FLAGS],
           ["$DISTCHECK_CONFIGURE_FLAGS \
	   '--with-cfsqp=$with_cfsqp'"])

  cfsqp_fail=no
  AS_IF([test "x$with_cfsqp" != xno],
    [
      # Search for Cfsqp library.
      CFSQP_LIB([], [cfsqp_fail=yes])

      # Search for Cfsqp headers.
      CFSQP_HEADERS([], [cfsqp_fail=yes])

      # If both tests are OK, add the library and define the CPP symbol.
      AS_IF([test "x$cfsqp_fail" = xno],
	[AC_SUBST([CFSQP_LIBADD], ["-lcfsqp"])
	 AC_DEFINE([HAVE_CFSQP], [1],
                   [Define if you have cfsqp])])

      # If the support was explicitly required, but detection has failed,
      # this is a fatal error.
      AS_IF([test "x$with_cfsqp" = xyes && \
             test "x$cfsqp_fail" = xyes],
        [AC_MSG_FAILURE(
        [CFSQP test failed (--without-cfsqp to disable)])
        ])
    ])

  # Define a boolean indicating whether or not the package has been found.
  AM_CONDITIONAL([HAVE_CFSQP],
                 [test "x$with_cfsqp" != xno && \
		  test "x$cfsqp_fail" != xyes])
]) # CFSQP_ARG_WITH
